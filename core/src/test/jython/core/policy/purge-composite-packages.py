## PACKAGES
def deploy(package, env):
    depl = deployment.prepareInitial(package.id, env.id)
    taskId = deployment.createDeployTask(depl).id
    deployit.startTaskAndWait(taskId)

devServer = repository.create(factory.configurationItem('Infrastructure/policy-dev-server', 'yak.YakServer', {}))
devEnv = repository.create(factory.configurationItem('Environments/policy-dev-env', 'udm.Environment', {'members': [devServer.id]}))

testServer = repository.create(factory.configurationItem('Infrastructure/policy-test-server', 'yak.YakServer', {}))
testEnv = repository.create(factory.configurationItem('Environments/policy-test-env', 'udm.Environment', {'members': [testServer.id]}))

app1 = repository.create(factory.configurationItem('Applications/policy-app-1', 'udm.Application'))
app2 = repository.create(factory.configurationItem('Applications/policy-app-2', 'udm.Application'))
appCompositeA = repository.create(factory.configurationItem('Applications/policy-app-composite-a', 'udm.Application'))
appCompositeB = repository.create(factory.configurationItem('Applications/policy-app-composite-b', 'udm.Application'))

#
package1_003 = repository.create(factory.configurationItem('Applications/policy-app-1/0.0.3', 'udm.DeploymentPackage'))
package1_005 = repository.create(factory.configurationItem('Applications/policy-app-1/0.0.5', 'udm.DeploymentPackage'))
package1_100 = repository.create(factory.configurationItem('Applications/policy-app-1/1.0.0', 'udm.DeploymentPackage'))

package2_10 = repository.create(factory.configurationItem('Applications/policy-app-2/1.0', 'udm.DeploymentPackage'))
package2_20 = repository.create(factory.configurationItem('Applications/policy-app-2/2.0', 'udm.DeploymentPackage'))
package2_30 = repository.create(factory.configurationItem('Applications/policy-app-2/3.0', 'udm.DeploymentPackage'))

packagecompa_10 = repository.create(factory.configurationItem('Applications/policy-app-composite-a/1.0', 'udm.CompositePackage', {'packages': [package1_003.id]}))
packagecompa_20 = repository.create(factory.configurationItem('Applications/policy-app-composite-a/2.0', 'udm.CompositePackage'))

packagecomp_03 = repository.create(factory.configurationItem('Applications/policy-app-composite-b/0.3', 'udm.CompositePackage', {'packages': [packagecompa_10.id]}))
packagecomp_05 = repository.create(factory.configurationItem('Applications/policy-app-composite-b/0.5', 'udm.CompositePackage', {'packages': [package1_005.id]}))
packagecomp_10 = repository.create(factory.configurationItem('Applications/policy-app-composite-b/1.0', 'udm.CompositePackage', {'packages': [package1_100.id, package2_10.id]}))
packagecomp_20 = repository.create(factory.configurationItem('Applications/policy-app-composite-b/2.0', 'udm.CompositePackage', {'packages': [package2_20.id]}))

deploy(packagecomp_10, devEnv)

packagePolicy = repository.create(factory.configurationItem('Configuration/package-policy', 'policy.PackageRetentionPolicy', {'enabled': 'false', 'packageRetention': '1', 'pattern': '^Applications/policy.*$'}))

try:
    deployit.executeControlTask('executeJob', packagePolicy)

    assertTrue(repository.exists(package1_003.id), package1_003.id)
    assertTrue(repository.exists(packagecompa_10.id), packagecompa_10.id)
    assertTrue(repository.exists(packagecompa_20.id), packagecompa_20.id)
    assertFalse(repository.exists(packagecomp_03.id), packagecomp_03.id)

    assertFalse(repository.exists(package1_005.id), package1_005.id)
    assertFalse(repository.exists(packagecomp_05.id), packagecomp_05.id)

    assertTrue(repository.exists(package1_100.id), package1_100.id)
    assertTrue(repository.exists(package2_10.id), package2_10.id)
    assertTrue(repository.exists(packagecomp_10.id), packagecomp_10.id)

    assertTrue(repository.exists(package2_20.id), package2_20.id)
    assertTrue(repository.exists(packagecomp_20.id), packagecomp_20.id)

    assertTrue(repository.exists(package2_30.id), package2_30.id)

    deployit.executeControlTask('executeJob', packagePolicy)

    assertFalse(repository.exists(package1_003.id), package1_003.id)
    assertFalse(repository.exists(packagecompa_10.id), packagecompa_10.id)
    assertTrue(repository.exists(packagecompa_20.id), packagecompa_20.id)
    assertFalse(repository.exists(packagecomp_03.id), packagecomp_03.id)

finally:
    repository.delete(packagePolicy.id)
    repository.delete(devEnv.id)
    repository.delete(devServer.id)
    repository.delete(testEnv.id)
    repository.delete(testServer.id)
    repository.delete(appCompositeB.id)
    repository.delete(appCompositeA.id)
    repository.delete(app1.id)
    repository.delete(app2.id)